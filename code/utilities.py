import numpy as np
import xarray as xr
import xrft
import harmonica as hm
import verde as vd
import cmocean
from matplotlib.colors import ListedColormap
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import harmonica as hm
from pathlib import Path
import pandas as pd
from choclo.constants import GRAVITATIONAL_CONST

def split_prisms(prisms):
    '''
    Function to split prisms above and below the ellipsoid.
    Rerturns combined prisms and an index of which ones are above the ellipsoid.
    '''
    prisms_pos = prisms[prisms[:,5] >= 0, :]
    prisms_neg = prisms[prisms[:,4] < 0, :]
    prisms_pos[prisms_pos[:,4] < 0, 4] = 0.0
    prisms_neg[prisms_neg[:,5] > 0, 5] = 0.0
    prisms = np.vstack([prisms_pos, prisms_neg])
    idx_pos = np.full(prisms.shape[0], False)
    idx_pos[:prisms_pos.shape[0]] = True
    return prisms, idx_pos

def apply_mask(xv, yv, zmin, zmax, mask):
    masked_id = np.where(~np.isnan(mask.values))
    return xv[masked_id], yv[masked_id], zmin[masked_id], zmax[masked_id]

def make_prisms(x_grid, y_grid, zmin_bed, zmax_height, half):
    prisms = np.stack([
        x_grid - half,
        x_grid + half,
        y_grid - half,
        y_grid + half,
        zmin_bed,
        zmax_height
    ]).T
    return prisms

def remove_spurious_prisms(prisms, densities):
    bad_idx = np.nonzero(prisms[:,4] > prisms[:,5])[0]
    prisms = np.delete(prisms, bad_idx, axis=0)
    densities = np.delete(densities, bad_idx, axis=0)
    return prisms, densities

def calc_gz(cav_g, prisms, densities):
    gravity_obs = (cav_g.x.values, cav_g.y.values, cav_g.height.values)
    gz = hm.prism_gravity(gravity_obs, prisms, densities, field="g_z")
    return gz

def calc_terrain_effect(cav_bm, cav_g):
    cav_bm['bed_ell'] = cav_bm['bed'] + cav_bm['geoid']
    cav_bm['surface_ell'] = cav_bm['surface'] + cav_bm['geoid']

    water_mask = cav_bm.where((cav_bm.mask == 0) ^ (cav_bm.mask == 3))
    ice_mask = cav_bm.where((cav_bm.mask == 3) ^ (cav_bm.mask == 2))
    rock_mask = cav_bm.where(cav_bm.bed_ell >= 0)
    negative_rock_mask = cav_bm.where(cav_bm.surface_ell < 0)

    distance = int(cav_bm.x[1] - cav_bm.x[0])
    half = distance / 2

    xv, yv = np.meshgrid(cav_bm.x, cav_bm.y)

    # Water
    water_column_thickness = cav_bm.surface - cav_bm.thickness - cav_bm.bed
    xv_water, yv_water, zmin, zmax = apply_mask(xv, yv, cav_bm.bed_ell.values, cav_bm.bed_ell.values + water_column_thickness.values, water_mask.mask)
    prisms_water = make_prisms(xv_water, yv_water, zmin, zmax, half)
    prisms_water, idx_pos_water = split_prisms(prisms_water)

    # Ice
    xv_ice, yv_ice, zmin, zmax = apply_mask(xv, yv, cav_bm.surface_ell.values - water_column_thickness.values, cav_bm.surface_ell.values, ice_mask.mask)
    prisms_ice = make_prisms(xv_ice, yv_ice, zmin, zmax, half)
    prisms_ice, idx_pos_ice = split_prisms(prisms_ice)

    # Rock
    xv_rock, yv_rock, zmin, zmax = apply_mask(xv, yv, np.zeros(cav_bm.bed_ell.values.shape), cav_bm.bed_ell.values, rock_mask.mask)
    prisms_rock = make_prisms(xv_rock, yv_rock, zmin, zmax, half)

    # Negative Rock
    xv_neg_rock, yv_neg_rock, zmin, zmax = apply_mask(xv, yv, cav_bm.surface_ell.values, np.zeros(cav_bm.surface_ell.values.shape), negative_rock_mask.mask)
    prisms_neg_rock = make_prisms(xv_neg_rock, yv_neg_rock, zmin, zmax, half)

    rock_density = 2670
    ice_density = 917
    water_density = 1035

    densities_rock = np.ones(prisms_rock.shape[0]) * rock_density
    densities_neg_rock = np.ones(prisms_neg_rock.shape[0]) * -rock_density
    densities_water = np.where(idx_pos_water, water_density, water_density - rock_density)
    densities_ice = np.where(idx_pos_ice, ice_density, ice_density - rock_density)

    # Water
    prisms_water, densities_water = remove_spurious_prisms(prisms_water, densities_water)
    water_gz = calc_gz(cav_g, prisms_water, densities_water)

    # Ice
    prisms_ice, densities_ice = remove_spurious_prisms(prisms_ice, densities_ice)
    ice_gz = calc_gz(cav_g, prisms_ice, densities_ice)

    # Rock
    prisms_rock, densities_rock = remove_spurious_prisms(prisms_rock, densities_rock)
    rock_gz = calc_gz(cav_g, prisms_rock, densities_rock)

    # Negative Rock
    prisms_neg_rock, densities_neg_rock = remove_spurious_prisms(prisms_neg_rock, densities_neg_rock)
    neg_rock_gz = calc_gz(cav_g, prisms_neg_rock, densities_neg_rock)

    total_gz = water_gz + ice_gz + rock_gz + neg_rock_gz

    return total_gz

def xy_into_grid(ds, coords, values, fill=np.nan, ydim=0, xdim=1):
    yname = list(ds.dims)[ydim]
    xname = list(ds.dims)[xdim]
    shape = (ds[yname].size, ds[xname].size)
    
    values = np.array(values)
    if len(values.shape)==1:
        values = np.expand_dims(values, axis=0)
        
    arr = np.full((len(values), *shape), fill)
    
    for i in range(shape[0]):
        for j in range(shape[1]):
            idx = (coords[0]==ds[xname].values[j]) & (coords[1]==ds[yname].values[i])
            if np.count_nonzero(idx)>0:
                arr[:,i,j] = values[:,idx].squeeze()
    if arr.shape[0]>1:
        return tuple(arr)
    else:
        return arr.squeeze()

def lowpass_filter_domain(ds, grid, data_mask, cutoff=10e3, pad=0):
    xx, yy = np.meshgrid(ds.x, ds.y)
    
    grid_da = xr.DataArray(
        data = grid,
        dims = ['y', 'x'],
        coords = dict(
            x = (['x'], ds.x.values),
            y = (['y'], ds.y.values)
        )
    )
    
    pad_width = {
        "x": grid_da.x.size // 3,
        "y": grid_da.y.size // 3,
    }
    
    grid_pad = xrft.pad(grid_da, pad_width)
    
    grid_low_freqs = hm.gaussian_lowpass(
        grid_pad, wavelength=cutoff
    )
    grid_high_freqs = hm.gaussian_highpass(
        grid_pad, wavelength=cutoff
    )
    
    grid_low_freqs = xrft.unpad(grid_low_freqs, pad_width)
    grid_high_freqs = xrft.unpad(grid_high_freqs, pad_width)

    msk_tmp = vd.distance_mask(
        data_coordinates = (xx[ds.inv_msk==False], yy[ds.inv_msk==False]),
        maxdist=pad,
        coordinates = (xx, yy)
    )
    inv_msk_pad = ~msk_tmp.reshape(xx.shape)

    grid_mod = np.where(np.all([data_mask, inv_msk_pad], axis=0), grid_low_freqs, grid)
    return grid_mod[data_mask==True]

def get_topo_cm():
    cm_data = [[0.11107901,0.01607537,0.36064295],
           [0.11134847,0.02354502,0.36326925],
           [0.11168116,0.03113912,0.36594344],
           [0.11202203,0.03890501,0.36866726],
           [0.11236141,0.04647702,0.37143778],
           [0.11269799,0.05347645,0.37425151],
           [0.11302678,0.06004023,0.37710583],
           [0.11334736,0.06625466,0.37999787],
           [0.11365649,0.07218374,0.38292542],
           [0.11395194,0.07787496,0.38588643],
           [0.11423393,0.08336383,0.3888787 ],
           [0.11450255,0.08867839,0.39190028],
           [0.11474706,0.09384581,0.39495092],
           [0.11497773,0.09887977,0.39802755],
           [0.11518537,0.10379916,0.40113001],
           [0.11537439,0.10861474,0.40425633],
           [0.11553608,0.11334032,0.40740654],
           [0.1156787 ,0.11798187,0.41057828],
           [0.11579401,0.12255001,0.41377172],
           [0.11587989,0.12705198,0.41698623],
           [0.11594048,0.13149219,0.42022027],
           [0.11597364,0.1358764 ,0.4234733 ],
           [0.11597717,0.14020969,0.42674489],
           [0.11594415,0.14449791,0.43003537],
           [0.11587881,0.14874322,0.43334338],
           [0.11578057,0.15294886,0.43666835],
           [0.11564672,0.15711825,0.44001007],
           [0.11547575,0.16125421,0.4433682 ],
           [0.11526698,0.16535905,0.44674225],
           [0.11501777,0.16943535,0.45013209],
           [0.11472659,0.17348517,0.45353742],
           [0.11439188,0.17751041,0.45695796],
           [0.11401204,0.18151281,0.46039347],
           [0.11358544,0.18549395,0.46384368],
           [0.11311036,0.18945529,0.46730837],
           [0.11260005,0.19339873,0.47077171],
           [0.11204447,0.19733135,0.47421834],
           [0.11143899,0.20125479,0.47764787],
           [0.1107828 ,0.20516987,0.48105934],
           [0.11007535,0.20907731,0.48445172],
           [0.10931587,0.21297781,0.487824  ],
           [0.10850398,0.21687196,0.49117511],
           [0.10763917,0.22076034,0.49450401],
           [0.10672096,0.22464348,0.49780961],
           [0.10574837,0.22852197,0.50109086],
           [0.10472161,0.23239615,0.50434661],
           [0.10364033,0.23626645,0.50757573],
           [0.10250472,0.24013318,0.51077709],
           [0.10131377,0.24399683,0.51394955],
           [0.1000681 ,0.2478576 ,0.51709193],
           [0.09876836,0.25171569,0.52020303],
           [0.09741419,0.25557143,0.5232817 ],
           [0.09600666,0.25942495,0.52632671],
           [0.0945468 ,0.26327637,0.52933688],
           [0.09303506,0.26712592,0.532311  ],
           [0.09147373,0.27097354,0.53524787],
           [0.08987331,0.27481924,0.53814126],
           [0.08822956,0.27866305,0.54099411],
           [0.08654458,0.28250495,0.54380573],
           [0.08482088,0.28634499,0.54657494],
           [0.08306349,0.29018294,0.54930066],
           [0.081277  ,0.29401867,0.55198181],
           [0.07948168,0.29785181,0.55461064],
           [0.07767487,0.30168222,0.55719102],
           [0.07586075,0.30550975,0.55972343],
           [0.07404801,0.30933412,0.56220701],
           [0.07225336,0.31315485,0.56463846],
           [0.07050296,0.31697127,0.56701211],
           [0.06879042,0.32078343,0.56933447],
           [0.06713004,0.32459088,0.57160507],
           [0.06555111,0.32839287,0.5738193 ],
           [0.06408124,0.33218868,0.57597418],
           [0.0627178 ,0.33597831,0.57807631],
           [0.0614802 ,0.33976125,0.58012571],
           [0.06042808,0.34353608,0.58211195],
           [0.05955064,0.34730299,0.5840445 ],
           [0.05886407,0.35106154,0.58592518],
           [0.05841898,0.35481048,0.58774705],
           [0.05822476,0.3585495 ,0.58951371],
           [0.05827947,0.36227851,0.59123083],
           [0.0586207 ,0.36599646,0.59289401],
           [0.0592662 ,0.36970267,0.59450314],
           [0.06019425,0.3733974 ,0.59606652],
           [0.06142399,0.37707983,0.59758208],
           [0.06297662,0.38074898,0.5990465 ],
           [0.06481059,0.38440546,0.60047013],
           [0.06692267,0.38804888,0.60185381],
           [0.06934356,0.39167778,0.60318977],
           [0.0720141 ,0.39529323,0.60449071],
           [0.07491946,0.39889521,0.60575808],
           [0.07789806,0.4024894 ,0.60702347],
           [0.08089306,0.40607836,0.60829643],
           [0.08390067,0.4096625 ,0.60957721],
           [0.08692325,0.41324193,0.61086523],
           [0.08996359,0.4168167 ,0.61215985],
           [0.09301427,0.42038743,0.61346191],
           [0.09607479,0.42395436,0.61477129],
           [0.09915396,0.42751717,0.61608647],
           [0.10224207,0.43107663,0.61740874],
           [0.10533864,0.43463297,0.61873803],
           [0.10844986,0.43818598,0.6200732 ],
           [0.11157143,0.44173612,0.62141477],
           [0.11470049,0.44528375,0.62276307],
           [0.1178412 ,0.44882879,0.6241173 ],
           [0.12099341,0.4523714 ,0.62547736],
           [0.12415244,0.45591207,0.62684391],
           [0.12732095,0.45945079,0.6282164 ],
           [0.13050178,0.46298752,0.62959423],
           [0.13368899,0.46652284,0.63097833],
           [0.13688415,0.4700568 ,0.63236836],
           [0.14009223,0.47358918,0.63376335],
           [0.14330638,0.47712063,0.63516443],
           [0.14652747,0.48065126,0.63657139],
           [0.14976181,0.4841807 ,0.63798301],
           [0.15300204,0.48770969,0.63940054],
           [0.1562486 ,0.49123832,0.64082387],
           [0.15950853,0.49476618,0.64225164],
           [0.16277426,0.49829399,0.64368519],
           [0.16604605,0.5018219 ,0.64512444],
           [0.16933115,0.50534941,0.64656797],
           [0.17262199,0.5088773 ,0.64801714],
           [0.17591888,0.51240567,0.64947189],
           [0.17922886,0.51593402,0.65093081],
           [0.18254458,0.51946314,0.65239528],
           [0.18586657,0.52299311,0.65386519],
           [0.18920127,0.52652344,0.6553392 ],
           [0.19254174,0.53005491,0.65681868],
           [0.19588885,0.53358755,0.65830342],
           [0.19924821,0.53712094,0.65979227],
           [0.20261338,0.54065582,0.66128651],
           [0.2059857 ,0.54419217,0.66278583],
           [0.2093697 ,0.54772966,0.66428929],
           [0.21275956,0.55126897,0.66579807],
           [0.21615718,0.55481003,0.66731174],
           [0.21956586,0.55835261,0.66882962],
           [0.22298046,0.56189735,0.67035274],
           [0.2264035 ,0.56544409,0.67188057],
           [0.22983691,0.56899273,0.6734127 ],
           [0.23337479,0.57253314,0.67492882],
           [0.23714074,0.5760513 ,0.67640323],
           [0.24113136,0.57954647,0.67783869],
           [0.24531195,0.58302141,0.67924485],
           [0.24969157,0.58647407,0.68062111],
           [0.25426395,0.5899041 ,0.68197012],
           [0.25899347,0.5933146 ,0.68330125],
           [0.26387292,0.59670555,0.68461702],
           [0.26891752,0.60007428,0.68591424],
           [0.27408295,0.60342531,0.68720391],
           [0.27935835,0.60675936,0.68848888],
           [0.28473628,0.61007678,0.68977101],
           [0.29022554,0.61337595,0.6910479 ],
           [0.29579204,0.61666075,0.69232804],
           [0.30142699,0.61993203,0.69361339],
           [0.30712256,0.62319063,0.69490538],
           [0.31287084,0.62643742,0.69620598],
           [0.31866771,0.62967286,0.69751571],
           [0.32451297,0.63289686,0.69883417],
           [0.33038988,0.63611179,0.70016531],
           [0.33629288,0.63931846,0.70151045],
           [0.3422179 ,0.64251759,0.7028699 ],
           [0.34816027,0.64570999,0.70424478],
           [0.35411592,0.64889639,0.70563595],
           [0.36008187,0.65207746,0.70704362],
           [0.36605492,0.6552539 ,0.70846836],
           [0.37203219,0.65842638,0.70991073],
           [0.37801119,0.66159553,0.71137114],
           [0.38398945,0.66476199,0.7128501 ],
           [0.38996514,0.66792635,0.71434784],
           [0.39593654,0.67108918,0.71586456],
           [0.40190215,0.67425101,0.71740046],
           [0.40786055,0.67741238,0.71895576],
           [0.41381324,0.68057331,0.72052989],
           [0.41976291,0.6837336 ,0.72212184],
           [0.42570217,0.68689483,0.72373387],
           [0.43163096,0.69005736,0.72536551],
           [0.43754834,0.69322168,0.72701696],
           [0.44345254,0.69638836,0.72868921],
           [0.44934417,0.69955767,0.73038139],
           [0.45522708,0.70272917,0.73209223],
           [0.46110502,0.70590233,0.73382091],
           [0.46696958,0.70907916,0.73556946],
           [0.47281916,0.71226021,0.73733889],
           [0.47865489,0.71544564,0.73912818],
           [0.48448   ,0.718635  ,0.74093702],
           [0.49030172,0.72182715,0.74276225],
           [0.49610834,0.72502474,0.744608  ],
           [0.50189925,0.72822818,0.74647465],
           [0.50767787,0.73143709,0.74836055],
           [0.51345602,0.73464916,0.7502622 ],
           [0.51921858,0.73786789,0.75218457],
           [0.52496631,0.74109345,0.75412705],
           [0.53070611,0.74432456,0.75608756],
           [0.53644104,0.74756076,0.75806535],
           [0.54216113,0.75080458,0.76006329],
           [0.54786586,0.75405639,0.76208182],
           [0.55357444,0.75731209,0.76411424],
           [0.55926854,0.76057607,0.76616682],
           [0.56494681,0.76384889,0.76824046],
           [0.57062595,0.76712696,0.77032888],
           [0.57629436,0.77041319,0.77243639],
           [0.5819482 ,0.77370875,0.77456415],
           [0.58760258,0.77701028,0.77670693],
           [0.59324724,0.78032045,0.77886844],
           [0.59887768,0.78364059,0.78105007],
           [0.60451121,0.78696672,0.78324596],
           [0.61013426,0.7903024 ,0.78546036],
           [0.6157647 ,0.79364423,0.78767918],
           [0.62137078,0.79699967,0.78991989],
           [0.62696881,0.80036556,0.79217027],
           [0.63255614,0.80374267,0.79443265],
           [0.63812292,0.80713328,0.79671517],
           [0.64368288,0.81053472,0.79900728],
           [0.64923413,0.81394758,0.80131071],
           [0.65476627,0.81737429,0.80363414],
           [0.66029179,0.8208124 ,0.80596776],
           [0.66581028,0.82426218,0.80831207],
           [0.67131311,0.82772571,0.81067444],
           [0.67680755,0.83120162,0.81304908],
           [0.68229582,0.83468961,0.81543431],
           [0.68777775,0.83818993,0.8178304 ],
           [0.69324428,0.84170476,0.82024526],
           [0.69870536,0.84523211,0.82267059],
           [0.70416103,0.84877217,0.82510642],
           [0.70961177,0.85232501,0.82755241],
           [0.71505231,0.85589202,0.83001334],
           [0.7204857 ,0.8594727 ,0.83248663],
           [0.72591402,0.86306679,0.8349705 ],
           [0.73133759,0.8666744 ,0.83746471],
           [0.73675718,0.87029555,0.83996856],
           [0.74217224,0.87393056,0.84248259],
           [0.74758289,0.87757959,0.8450067 ],
           [0.75298681,0.88124335,0.84754314],
           [0.75838719,0.88492132,0.85008889],
           [0.7637845 ,0.88861358,0.85264349],
           [0.76917928,0.8923202 ,0.85520638],
           [0.77457168,0.89604132,0.85777737],
           [0.7799624 ,0.89977699,0.86035571],
           [0.7853515 ,0.90352737,0.86294127],
           [0.79073933,0.90729256,0.86553365],
           [0.79612621,0.91107269,0.86813244],
           [0.80150972,0.91486849,0.8707402 ],
           [0.80689439,0.9186791 ,0.87335207],
           [0.81228052,0.92250465,0.87596762],
           [0.81766978,0.92634494,0.87858492],
           [0.8230576 ,0.93020117,0.88120896],
           [0.82844699,0.93407285,0.88383641],
           [0.83384399,0.93795878,0.88646024],
           [0.83923838,0.94186144,0.88909227],
           [0.8446404 ,0.9457787 ,0.89172052],
           [0.85004922,0.94971091,0.89434583],
           [0.85546138,0.953659  ,0.8969724 ],
           [0.86088038,0.95762236,0.89959603],
           [0.8663064 ,0.96160109,0.90221656],
           [0.87174611,0.96559388,0.90482548],
           [0.87720396,0.96959991,0.9074168 ],
           [0.88272457,0.97360962,0.9099307 ]]
    
    water_cm = np.concatenate([np.array(cm_data), np.expand_dims(np.ones(len(cm_data)), -1)], axis=1)
    new_topo = ListedColormap(np.concatenate([water_cm, cmocean.cm.topo(np.linspace(0.5, 1, 256))]), name='new_topo')
    return new_topo